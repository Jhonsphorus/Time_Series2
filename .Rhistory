library(forecast)
seasonplot(AirPassengers, 12, col=rainbow(12), year.labels=TRUE, main="Seasonal Plot: AirPassenger")
#plot(decompose(AirPassengers))
plot(stl(AirPassengers, s.window ="periodic"))
data("JohnsonJohnson")
dt <- JohnsonJohnson
start(dt)
end(dt)
frequency(dt)
plot(dt)
?aggregate
plot(aggregate(dt, FUN = mean))
dt
?JohnsonJohnson
dt <- log(dt)
plot(dt)
#dt <- log(dt)
plot(dt)
data("JohnsonJohnson")
dt <- JohnsonJohnson
#dt <- log(dt)
plot(dt)
plot(aggregate(dt, FUN = mean))
plot(dt~cycle(dt))
#dt <- log(dt)
plot(dt)
abline(reg=lm(dt~time(dt)) )
#This will aggregate the cycles and display a year on year trend i.e. the mean or median in each year
par(mfrow=c(1,2))
plot(aggregate(AirPassengers,FUN=median))
plot(aggregate(AirPassengers,FUN=mean))
boxplot(dt~cycle(dt))
boxplot(dt~cycle(dt), col=c("red","green","blue","yellow"))
seasonplot(dt, , 12, col=rainbow(12), year.labels=TRUE, main="Seasonality Plot")
library(forecast)
seasonplot(dt, , 12, col=rainbow(12), year.labels=TRUE, main="Seasonality Plot")
library(forecast)
seasonplot(dt, 12, col=rainbow(12), year.labels=TRUE, main="Seasonality Plot")
library(forecast)
seasonplot(dt, 12, col=rainbow(7), year.labels=TRUE, main="Seasonality Plot")
library(forecast)
seasonplot(dt, 4, col=rainbow(7), year.labels=TRUE, main="Seasonality Plot")
library(forecast)
seasonplot(dt, 12, col=rainbow(12), year.labels=TRUE, main="Seasonality Plot")
library(forecast)
seasonplot(dt, 12, col=rainbow(20), year.labels=TRUE, main="Seasonality Plot")
library(forecast)
seasonplot(dt, 12, col=rainbow(4), year.labels=TRUE, main="Seasonality Plot")
library(forecast)
seasonplot(dt, 4, col=rainbow(4), year.labels=TRUE, main="Seasonality Plot")
library(forecast)
seasonplot(dt, 4, col=rainbow(21), year.labels=TRUE, main="Seasonality Plot")
plot(stl(dt))
plot(stl(dt, s.window = "periodic"))
summary(dt)
plot(stl(dt, s.window = "periodic"))
library(forecast)
seasonplot(dt, 4, col=rainbow(21), year.labels=TRUE, main="Seasonality Plot")
#dt <- log(dt)
plot(dt)
abline(reg=lm(dt~time(dt)) )
plot(aggregate(dt, FUN = mean))
boxplot(dt~cycle(dt), col=c("red","green","blue","yellow"))
library(tseries)
library(tseries)
adf.test(dt)
ndiffs(dt)
?diff
dt_diff <- diff(dt, differences = 1)
dt_diff <- diff(dt, differences = 1)
plot(dt_diff)
adf.test(dt_diff)
acf(dt)
dt_diff <- diff(dt, differences = 1)
acf(dt_diff)
pacf(dt_diff)
ndiffs(dt_diff)
# By specifying the order and the seasonality, the stationary has being taken care of.
dt_fit <- arima(dt_diff, order=c(0, 1, 2),seasonal = list(order = c(0, 1, 2), period = 4))
pred <- predict(dt_fit, n.ahead = 10*4)
ts.plot(dt,pred$pred, lty = c(1,3))
# By specifying the order and the seasonality, the stationary has being taken care of.
dt_fit <- arima(dt_diff, order=c(0, 1, 3),seasonal = list(order = c(0, 1, 3), period = 4))
pred <- predict(dt_fit, n.ahead = 10*4)
ts.plot(dt,pred$pred, lty = c(1,3))
# By specifying the order and the seasonality, the stationary has being taken care of.
dt_fit <- arima(dt_diff, order=c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 4))
pred <- predict(dt_fit, n.ahead = 10*4)
ts.plot(dt,pred$pred, lty = c(1,3))
ts.plot(JohnsonJohnson,pred$pred, lty = c(1,3))
ts.plot(JohnsonJohnson,pred$pred, lty = c(1,3))
# ts.plot(JohnsonJohnson,pred$pred, lty = c(1,3))
ts.plot(JohnsonJohnson,pred$pred)
# ts.plot(JohnsonJohnson,pred$pred, lty = c(1,3))
ts.plot(JohnsonJohnson,pred$pred)
# ts.plot(JohnsonJohnson,pred$pred, lty = c(1,3))
ts.plot(JohnsonJohnson,pred$pred)
ts.plot(JohnsonJohnson,pred$pred, lty = c(1,3))
#ts.plot(JohnsonJohnson,pred$pred)
model1 <- hw(dt, initial = "optimal", h=24, beta=NULL, gamma=NULL)
model1 <- hw(dt, initial = "optimal", h=24, beta=NULL, gamma=NULL)
plot(model1)
?hw
model1 <- hw(dt, initial = "optimal", h=40, beta=NULL, gamma=NULL)
plot(model1)
model1 <- hw(dt_diff, initial = "optimal", h=40, beta=NULL, gamma=NULL)
plot(model1)
model1$upper
model <- hw(dt_diff, initial = "optimal", h=24, gamma=NULL)
model2 <- hw(dt_diff, initial = "optimal", h=24, gamma=NULL)
model2 <- hw(dt_diff, initial = "optimal", h=24, gamma=NULL)
plot(model2)
model2 <- hw(dt_diff, initial = "optimal", h=40, gamma=NULL)
plot(model2)
model3 <- hw(dt_diff, initial = "optimal", h=40)
model3 <- hw(dt_diff, initial = "optimal", h=40)
plot(model3)
dt_arima <- auto.arima(dt_diff, h=10*4)
dt_arima <- auto.arima(dt_diff)
dt_arima <- auto.arima(dt_diff)
dt_forecast <- forecast(dt_arima, h=10*4)
dt_arima <- auto.arima(dt_diff)
dt_forecast <- forecast(dt_arima, h=10*4)
plot(dt_forecast)
dt_arima <- auto.arima(JohnsonJohnson)
dt_forecast <- forecast(dt_arima, h=10*4)
plot(dt_forecast)
dt_arima <- auto.arima(JohnsonJohnson)
dt_forecast <- forecast(dt_arima, h=10*4)
plot(dt_forecast)
dt_arima <- auto.arima(dt)
dt_forecast <- forecast(dt_arima, h=10*4)
plot(dt_forecast)
model2 <- hw(dt, initial = "optimal", h=40, gamma=NULL)
plot(model2)
model2 <- hw(dt_diff, initial = "optimal", h=40, gamma=NULL)
plot(model2)
# By specifying the order and the seasonality, the stationary has being taken care of.
#dt_fit <- arima(dt_diff, order=c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 4))
dt_fit <- arima(dt_diff, period = 4))
# By specifying the order and the seasonality, the stationary has being taken care of.
#dt_fit <- arima(dt_diff, order=c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 4))
dt_fit <- arima(dt_diff, period = 4)
# By specifying the order and the seasonality, the stationary has being taken care of.
#dt_fit <- arima(dt_diff, order=c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 4))
dt_fit <- arima(dt_diff)
pred <- predict(dt_fit, n.ahead = 10*4)
pred <- predict(dt_fit, n.ahead = 10*4)
ts.plot(JohnsonJohnson,pred$pred, lty = c(1,3))
#ts.plot(JohnsonJohnson,pred$pred)
# By specifying the order and the seasonality, the stationary has being taken care of.
dt_fit <- arima(dt, order=c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 4))
pred <- predict(dt_fit, n.ahead = 10*4)
ts.plot(JohnsonJohnson,pred$pred, lty = c(1,3))
#ts.plot(JohnsonJohnson,pred$pred)
# By specifying the order and the seasonality, the stationary has being taken care of.
dt_fit <- arima(dt, order=c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 4))
pred <- predict(dt_fit, n.ahead = 10*4)
ts.plot(JohnsonJohnson,pred$pred, lty = c(1,3))
#ts.plot(JohnsonJohnson,pred$pred)
?hw
?auto.arima
?arima
model1 <- hw(dt, initial = "optimal", h=40, beta=NULL, gamma=NULL)
plot(model1)
#adf.test(dt)
adf.test(log(dt))
#ndiffs(dt)
ndiffs(log(dt))
#dt_diff <- diff(dt, differences = 1)
dt_diff <- diff(log(dt), differences = 1)
plot(dt_diff)
plot(dt_diff)
adf.test(dt_diff)
acf(dt)
acf(dt_diff)
pacf(dt_diff)
acf(dt_diff)
# By specifying the order and the seasonality, the stationary has being taken care of.
dt_fit <- arima(dt, order=c(2, 1, 0),seasonal = list(order = c(2, 1, 0), period = 4))
pred <- predict(dt_fit, n.ahead = 10*4)
ts.plot(JohnsonJohnson,pred$pred, lty = c(1,3))
#ts.plot(JohnsonJohnson,pred$pred)
ts.plot(JohnsonJohnson,2.718^pred$pred, log="y",lty = c(1,3))
#ts.plot(JohnsonJohnson,pred$pred)
adf.test(dt)
#adf.test(log(dt))
ndiffs(dt)
#ndiffs(log(dt))
dt_diff <- diff(dt, differences = 1)
#dt_diff <- diff(log(dt), differences = 1)
plot(dt_diff)
adf.test(dt_diff)
acf(dt)
acf(dt_diff)
pacf(dt_diff)
# By specifying the order and the seasonality, the stationary has being taken care of.
dt_fit <- arima(dt, order=c(2, 1, 0),seasonal = list(order = c(2, 1, 0), period = 4))
pred <- predict(dt_fit, n.ahead = 10*4)
ts.plot(JohnsonJohnson,2.718^pred$pred, log="y",lty = c(1,3))
#ts.plot(JohnsonJohnson,pred$pred)
ts.plot(JohnsonJohnson,pred$pred,lty = c(1,3))
#ts.plot(JohnsonJohnson,pred$pred)
oilPrice <- read.csv("BrentOilPrices.csv" )
View(oilPrice)
plot(oilPrice)
class(oilPrice)
oilPrice <- read.csv("BrentOilPrices.csv" )
ts(oilPrice)
class(oilPrice)
oilPrice <- read.csv("BrentOilPrices.csv" )
#ts(oilPrice)
View(oilPrice)
oilPrice <- read.csv("BrentOilPrices.csv" )
oilPrice = ts(oilPrice, frequency = 365, start = c(1987, 5,20))
class(oilPrice)
View(oilPrice)
oilPrice <- read.csv("BrentOilPrices.csv" )
#oilPrice = ts(oilPrice, frequency = 365, start = c(1987, 5,20))
View(oilPrice)
oilPrice <- read.csv("BrentOilPrices.csv" )
#oilPrice = ts(oilPrice, frequency = 365, start = c(1987, 5,20))
Price <- oilPrice$Price
class(Price)
Price <- oilPrice$Price
Date <- as.Date(oilPrice$Date)
class(oilPrice$Date)
Price <- oilPrice$Price
Date <- as.Date(oilPrice$Date)
#Price <- oilPrice$Price
#Date <- as.Date(oilPrice$Date)
price <- as.ts(oilPrice$Date,oilPrice$Price)
class(price)
View(price)
price
summary(price)
str(price)
oilPrice <- read.csv("BrentOilPrices.csv" )
dt_oil = ts(oilPrice, frequency = 365, start = c(1987, 5,20))
dt_oil
oilPrice <- read.csv("BrentOilPrices.csv" )
View(oilPrice)
dt_oil = ts(oilPrice,frequency = 365, start = c(1987, 5,20), end = c(2020,2,25))
class(dt_oil)
class(dt_oil)
str(dt_oil)
plot(dt_oil, xlab = "Date", ylab = "Oil Price ($)")
abline(reg=lm(dt_oil~time(dt_oil)))
#abline(reg=lm(dt_oil~time(dt_oil)))
start(dt_oil)
end(dt_oil)
frequency(dt_oil)
summary(dt_oil)
plot(aggregate(dt_oil, FUN = mean))
boxplot(dt_oil~cycle(dt_oil), col=c("red","green","blue","yellow"))
boxplot(dt_oil, col = "red")
library(forecast)
seasonplot(dt_oil, 365, col=rainbow(21), year.labels=TRUE, main="Seasonality Plot")
plot(decompose(dt_oil))
plot(stl(dt_oil, s.window = "periodic"))
library(tseries)
library(tseries)
adf.test(dt_oil)
ndiffs(dt_oil)
oilprice_diff <- diff(dt_oil, differences = 1)
adf.test(oilprice_diff)
adf.test(oilprice_diff)
nsdiffs(dt_oil)
plot(oilprice_diff)
plot(oilprice_diff, main = "Plot of Stationarized oil Price")
acf(dt_oil)
acf(oilprice_diff)
pacf(oilprice_diff)
# By specifying the order and the seasonality, the stationary has being taken care of.
fit <- arima(dt_oil, order=c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 4))
prediced_price <- predict(fit, n.head = 5*365)
prediced_price <- predict(fit, n.head = 5*365)
price <- as.ts(oilPrice$Date,oilPrice$Price, lty=c(1,3))
price <- ts.plot(oilPrice$Date,oilPrice$Price, lty=c(1,3))
ts.plot(oilPrice$Date,oilPrice$Price, lty=c(1,3))
ts.plot(dt_oil, prediced_price$pred, lty=c(1,3))
# By specifying the order and the seasonality, the stationary has being taken care of.
fit <- arima(dt_oil, order=c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 4))
prediced_price <- predict(fit, n.head = 5*365)
ts.plot(dt_oil, prediced_price$pred, lty=c(1,3))
# By specifying the order and the seasonality, the stationary has being taken care of.
fit <- arima(dt_oil, order=c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 100))
# By specifying the order and the seasonality, the stationary has being taken care of.
fit <- arima(dt_oil, order=c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 4))
prediced_price <- predict(fit, n.head = 5*365)
ts.plot(dt_oil, prediced_price$pred, lty=c(1,3))
ts.plot(prediced_price$pred, lty=c(1,3))
ts.plot(dt_oil, prediced_price$pred)
# By specifying the order and the seasonality, the stationary has being taken care of.
fit <-Arima(dt_oil, order=c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 4))
prediced_price <- predict(fit, n.head = 5*365)
ts.plot(dt_oil, prediced_price$pred)
oil_fit <- auto.arima(dt_oil)
plot(forecast(oil_fit))
oil_fit <- auto.arima(oilprice_diff)
plot(forecast(oil_fit))
#oil_fit <- auto.arima(oilprice_diff)
oil_fit <- auto.arima(dt_oil)
plot(forecast(oil_fit, h=2))
plot(forecast(oil_fit, h=2*365))
# By specifying the order and the seasonality, the stationary has being taken care of.
fit <-Arima(dt_oil, order=c(0, 1, 1),seasonal = list(order = c(0, 1, 1)))
# By specifying the order and the seasonality, the stationary has being taken care of.
fit <-Arima(dt_oil, order=c(0, 1, 1),seasonal = list(order = c(0, 1, 1)))
?Arima
# By specifying the order and the seasonality, the stationary has being taken care of.
fit <-Arima(dt_oil, order=c(0, 1, 1))
prediced_price <- predict(fit, n.head = 5*365)
prediced_price <- predict(fit, n.head = 5*365)
ts.plot(dt_oil, prediced_price$pred)
#predicted_price <- predict(fit, n.head = 5*365)
forecasted_price <- forecast(fit, h = 5*365)
#ts.plot(dt_oil, predicted_price$pred)
plot(forecasted_price)
# By specifying the order and the seasonality, the stationary has being taken care of.
fit <-Arima(dt_oil, order=c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 4))
#predicted_price <- predict(fit, n.head = 5*365)
forecasted_price <- forecast(fit, h = 5*365)
#ts.plot(dt_oil, predicted_price$pred)
plot(forecasted_price)
# By specifying the order and the seasonality, the stationary has being taken care of.
fit <-Arima(dt_oil, order=c(0, 1, 2), seasonal = list(order = c(0, 1, 2), period = 4))
#predicted_price <- predict(fit, n.head = 5*365)
forecasted_price <- forecast(fit, h = 5*365)
#predicted_price <- predict(fit, n.head = 5*365)
forecasted_price <- forecast(fit, h = 5*365)
#ts.plot(dt_oil, predicted_price$pred)
plot(forecasted_price)
# By specifying the order and the seasonality, the stationary has being taken care of.
fit <-Arima(dt_oil, order=c(1, 1, 0), seasonal = list(order = c(1, 1, 0), period = 4))
#predicted_price <- predict(fit, n.head = 5*365)
forecasted_price <- forecast(fit, h = 5*365)
#ts.plot(dt_oil, predicted_price$pred)
plot(forecasted_price)
# By specifying the order and the seasonality, the stationary has being taken care of.
fit <-Arima(dt_oil, order=c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 4))
#predicted_price <- predict(fit, n.head = 5*365)
forecasted_price <- forecast(fit, h = 5*365)
#ts.plot(dt_oil, predicted_price$pred)
plot(forecasted_price)
?auto.arima
oil_fit <- auto.arima(oilprice_diff)
#oil_fit <- auto.arima(dt_oil)
plot(forecast(oil_fit, h=2*365))
oil_fit <- auto.arima(oilprice_diff,stationary =TRUE, seasonal = TRUE)
#oil_fit <- auto.arima(dt_oil)
plot(forecast(oil_fit, h=2*365))
oil_fit <- auto.arima(dt_oil, stationary =FALSE, seasonal = TRUE)
#oil_fit <- auto.arima(dt_oil)
plot(forecast(oil_fit, h=2*365))
price_hw <- hw(dt, initial = "optimal", h=40, beta=NULL, gamma=NULL)
plot(price_hw)
price_hw <- hw(dt_oil, initial = "optimal", h=40, beta=NULL, gamma=NULL)
?hw
price_hw <- hw(dt_oil, initial = "optimal", h=40, beta=NULL, gamma=NULL)
ma(dt_oil)
price_ma <- ma(dt_oil, order = 365)
price_ma <- ma(dt_oil, order = 365)
plot(price_ma)
forecast(price_ma)
forecast(price_ma, h=2*365)
plot(forecast(price_ma, h=2*365))
forecast_ma <- forecast(price_ma, h=2*365)
plot(forecast_ma)
forecast_ma <- forecast(price_ma, h=2*365)
View(forecast_ma)
forecast_ma <- forecast(price_ma, h=2*365)
View(forecast_ma$upper)
forecast_ma <- forecast(price_ma, h=2*365)
View(forecast_ma$upper)
View(forecast_ma$lower)
forecast_ma <- forecast(price_ma, h=2*365)
View(forecast_ma$upper)
View(forecast_ma$fitted)
forecast_ma <- forecast(price_ma, h=2*365)
#View(forecast_ma$upper)
#View(forecast_ma$fitted)
forecast_ma$x
forecast_ma <- forecast(price_ma, h=2*365)
#View(forecast_ma$upper)
#View(forecast_ma$fitted)
View(forecast_ma$x)
plot(forecast_ma)
oil_fit <- auto.arima(dt_oil, stationary =FALSE, seasonal = TRUE)
#oil_fit <- auto.arima(dt_oil)
forecast_autoarima <- forecast(oil_fit, h=2*365)
forecast_autoarima <- forecast(oil_fit, h=2*365)
plot(forecast(forecast_autoarima))
forecast_autoarima$model
pred <- predict(fit, n.ahead = 10*12)
# 2.718^pred$pred for converting the logarithm value of 'AirPassenger' back to normal values
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
# Loading the 'AirPassengers' dataset
data(AirPassengers)
#This tells you that the data series is in a time series format
class(AirPassengers)
#This is the start of the time series
start(AirPassengers)
#This is the start of the time series
start(AirPassengers)
#This is the end of the time series
end(AirPassengers)
#The cycle of this time series is 12months in a year
frequency(AirPassengers)
##The number of passengers are distributed across the spectrum
summary(AirPassengers)
# To extract all the values in the 'AirPassengers' time series
sub_air = subset(AirPassengers,subset=TRUE,start=start(AirPassengers),end=end(AirPassengers))
# To extract all the values in the 'AirPassengers' time series
sub_air = subset(AirPassengers,subset=TRUE,start=start(AirPassengers),end=end(AirPassengers))
# To extract all the values in the 'AirPassengers' time series
sub_air = subset(AirPassengers,subset=TRUE,start=start(AirPassengers),end=end(AirPassengers))
hist(sub_air, col = "green", ylab="No of Passengers",border ="blue" )
# To extract all the values in the 'AirPassengers' time series
sub_air = subset(AirPassengers,subset=TRUE,start=start(AirPassengers),end=end(AirPassengers))
# Loading the 'AirPassengers' dataset
data(AirPassengers)
#This tells you that the data series is in a time series format
class(AirPassengers)
#This is the start of the time series
start(AirPassengers)
#This is the start of the time series
start(AirPassengers)
#This is the end of the time series
end(AirPassengers)
#This is the end of the time series
end(AirPassengers)
#The cycle of this time series is 12months in a year
frequency(AirPassengers)
#This will print the cycle across years.
cycle(AirPassengers)
##The number of passengers are distributed across the spectrum
summary(AirPassengers)
# To extract all the values in the 'AirPassengers' time series
sub_air = subset(AirPassengers,subset=TRUE,start=start(AirPassengers),end=end(AirPassengers))
# To extract all the values in the 'AirPassengers' time series
sub_air = subset(AirPassengers,subset=TRUE,start=start(AirPassengers),end=end(AirPassengers))
# To extract all the values in the 'AirPassengers' time series
sub_air = subset(AirPassengers,subset=TRUE,start=start(AirPassengers),end=end(AirPassengers))
#This will plot the time series
plot(AirPassengers)
# This will fit in a line
plot(AirPassengers)
#abline(reg=lm(AirPassengers~time(AirPassengers)))
abline(reg=lm(sub_air~time(AirPassengers)))
#time(AirPassengers)
cycle(AirPassengers)
#This will aggregate the cycles and display a year on year trend i.e. the mean or median in each year
par(mfrow=c(1,2))
plot(aggregate(AirPassengers,FUN=median))
plot(aggregate(AirPassengers,FUN=mean))
#Box plot across months will give us a sense on seasonal effect
boxplot(AirPassengers~cycle(AirPassengers),col=c("red","green","blue","yellow","cyan","orange","pink","purple","magenta","white"))
library(forecast)
seasonplot(AirPassengers, 12, col=rainbow(12), year.labels=TRUE, main="Seasonal Plot: AirPassenger")
#plot(decompose(AirPassengers))
plot(stl(AirPassengers, s.window ="periodic"))
ndiffs(AirPassengers)
data("AirPassengers")
dt <- AirPassengers
plot(dt)
adf.test(dt)
dt_log <- log(AirPassengers)
# The number of differencing is 1
ndiffs(dt_log)
dt_diff <- diff(dt_log)
dt_diff <- diff(dt_log)
adf.test(dt_diff, alternative="stationary", k=0)
plot(dt_diff, main = "Stationary AirPassenger TS ")
#ACF Plots: The plot below shows that the TS is decaying at a very slower rate, showing that the dt_log is not stationary
acf(dt_log)
#ACF Plots
acf(dt_diff)
#PACF Plots
pacf(dt_diff)
# By specifying the order and the seasonality, the stationary has being taken care of.
fit <- arima(dt_log, order=c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
pred <- predict(fit, n.ahead = 10*12)
# 2.718^pred$pred for converting the logarithm value of 'AirPassenger' back to normal values
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
pred_auto <- predict(oil_fit, n.head = 2*365)
ts.plot(dt_oil, pred_auto, lty = c(1,3))
pred_auto <- predict(oil_fit, n.head = 2*365)
ts.plot(dt_oil, pred_auto$pred, lty = c(1,3))
oil_fit <- auto.arima(dt_oil, stationary =FALSE, seasonal = TRUE)
#oil_fit <- auto.arima(dt_oil)
pred_auto <- predict(oil_fit, n.head = 2*365)
ts.plot(dt_oil, pred_auto$pred, lty = c(1,3))
plot(dt_oil, pred_auto$pred, lty = c(1,3))
ts.plot(dt_oil, pred_auto$pred, lty = c(1,3))
ts.plot(dt_oil,pred_auto$pred, lty = c(1,3))
pred_auto <- predict(oil_fit, n.head = 10)
pred_auto <- predict(oil_fit, n.head = 10)
ts.plot(dt_oil,pred_auto$pred, lty = c(1,3))
ts.plot(dt_oil,pred_auto$pred, lty = c(1,3))
pred_auto <- predict(oil_fit, n.head = 10*365)
ts.plot(dt_oil,pred_auto$pred, lty = c(1,3))
forecast_autoarima$model
price_hw <- hw(dt_oil, initial = "optimal", h=40, beta=NULL, gamma=NULL)
price_ma <- ma(dt_oil, order = 365)
plot(price_ma)
forecast_ma <- forecast(price_ma, h=2*365)
#View(forecast_ma$upper)
#View(forecast_ma$fitted)
View(forecast_ma$x)
plot(forecast_ma)
